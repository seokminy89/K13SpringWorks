package com.kosmo.springlegacy;


import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

@Controller
public class FileuploadController {
	
	//파일업로드를 위한 디렉토리의 물리적 경로 확인하기
	@RequestMapping("/fileUpload/uploadPath.do")
	//request, response 내장 객체를 사용하기 위해 매개변수로 선언
	public void uploadPath(HttpServletRequest req,
			HttpServletResponse resp) throws IOException{
		
		//request내장객체를 통해 서버의 물리적 경로 얻어옴
		String path = req.getSession().getServletContext()
				.getRealPath("/resources/upload");
		//upload디렉토리는 정적파일을 저장하기 위한 resources 하위에 생성한다.
		
		//response 내장 객체를 통해 MIME타입을 설정한다.
		resp.setContentType("text/html; charset=utf-8");
		//View를 호출하지 않고 컨트롤러에서 즉시 출력하기 위해 PrintWriter 사용
		PrintWriter pw = resp.getWriter();
		pw.print("/upload 디렉토리의 물리적경로 : "+path);
	}
	
	
	//파일 업로드 폼 매핑
	@RequestMapping("/fileUpload/uploadForm.do")
	public String uploadForm(){
		return "06FileUpload/uploadForm";
	}
	
	/*
	UUID(Universally Unique IDentifier)
		: 범용고유식별자. randomUUID()를 통해 문자열을 생성하면
		하이픈이 4개 포함된 32자의 랜덤하고 유니크한 문자열이 생성된다.
		JDK에서 기본 클래스로 제공된다.
	*/
	public static String getUuid() {
		String uuid = UUID.randomUUID().toString();
		System.out.println("생성된UUID-1"+ uuid);
		
		uuid = uuid.replace("-", "");
		System.out.println("생성된UUID-2"+ uuid);
		return uuid;
	}
	
	/*
	파일 업로드 처리 
	*/
	@RequestMapping(method=RequestMethod.POST, value = "/fileUpload/uploadAction.do")
	public String uploadAction(Model model,
				MultipartHttpServletRequest req){
		
		String path = req.getSession().getServletContext()
				.getRealPath("/resources/upload");
		MultipartFile mfile = null;
		List<Object> resultList = new ArrayList<Object>();
		try {
			String title = req.getParameter("title");
			Iterator itr = req.getFileNames();
			while(itr.hasNext()) {
				mfile = req.getFile(itr.next().toString());
				String originalName =
						new String(mfile.getOriginalFilename().getBytes(),
								"UTF-8");
				if("".equals(originalName)) continue;
				String ext = originalName.substring(
						originalName.lastIndexOf('.'));
				String saveFileName = getUuid() + ext;
				mfile.transferTo(new File(path + File.separator + 
						saveFileName));
				
				Map<String, String> fileMap = new HashMap<String, String>();
				fileMap.put("originalName", originalName);
				fileMap.put("saveFileName", saveFileName);
				fileMap.put("title", title);
				resultList.add(fileMap);
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		model.addAttribute("resultList", resultList);
		
		return "06FileUpload/uploadAction";
	}
	
}
