/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.55
 * Generated at: 2022-01-17 08:55:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views._02RequestMapping;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/springlegacy/static/bootstrap5.1.3/css/bootstrap.css\" />\r\n");
      out.write("<script src=\"/springlegacy/resources/jquery/jquery-3.6.0.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	<h2>@RequestMapping 어노테이션</h2>\r\n");
      out.write("	\r\n");
      out.write("	<h3>GET방식으로 전송하기[검색폼]</h3>\r\n");
      out.write("	<script>\r\n");
      out.write("	function searchCheck(f) {\r\n");
      out.write("		if(!f.searchWord.value){\r\n");
      out.write("			alert('검색어를 입력하세요');\r\n");
      out.write("			f.searchWord.focus();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("	<form action=\"../requestMapping/getSearch.do\"\r\n");
      out.write("		method=\"get\" name=\"searchFrm\"\r\n");
      out.write("		onsubmit=\"return searchCheck(this);\">\r\n");
      out.write("		\r\n");
      out.write("		<select name=\"searchColumn\">\r\n");
      out.write("			<option value=\"title\">제목</option>\r\n");
      out.write("			<option value=\"name\">작성자</option>\r\n");
      out.write("			<option value=\"content\">내용</option>\r\n");
      out.write("		</select>\r\n");
      out.write("		\r\n");
      out.write("		<input type=\"text\" name=\"searchWord\" />\r\n");
      out.write("		\r\n");
      out.write("		<input type=\"submit\" value=\"검색하기\" />\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<h3>POST 방식으로 전송하기[로그인폼]</h3>\r\n");
      out.write("	");

	String ctxPath = request.getContextPath();
	
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("	function loginCheck(fm) {\r\n");
      out.write("		if(!fm.searchWord.value){\r\n");
      out.write("			alert('검색어를 입력하세요');\r\n");
      out.write("			fm.searchWord.focus();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("	<form action=\"");
      out.print(ctxPath);
      out.write("/requestMapping/postLogin.do\"\r\n");
      out.write("		method=\"post\" name=\"loginFrm\"\r\n");
      out.write("		onsubmit=\"return loginCheck(this);\">\r\n");
      out.write("		\r\n");
      out.write("	<table class=\"table table-bordered\" \r\n");
      out.write("		style=\"width: 400px;\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>아이디</td>\r\n");
      out.write("			<td><input type=\"text\" name=\"user_id\" /></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>패스워드</td>\r\n");
      out.write("			<td><input type=\"text\" name=\"user_pw\" /></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\">\r\n");
      out.write("				<input type=\"submit\" value=\"로그인\"/>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<h3>@ModelAttribute 어노테이션 사용하여 커맨드객체\r\n");
      out.write("	이름 변경하기</h3>\r\n");
      out.write("	\r\n");
      out.write("	<script>\r\n");
      out.write("	var stuCheck = function(){}\r\n");
      out.write("	</script>\r\n");
      out.write("	<form action=\"");
      out.print(ctxPath);
      out.write("/requestMapping/modelAttribute\"\r\n");
      out.write("		method=\"post\" name=\"studentFrm\"\r\n");
      out.write("		onsubmit=\"return stuCheck(this);\">\r\n");
      out.write("		\r\n");
      out.write("	<table class=\"table table-bordered\" style=\"width: 400px;\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>이름</td>\r\n");
      out.write("			<td><input type=\"text\" name=\"name\" /></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>나이</td>\r\n");
      out.write("			<td><input type=\"text\" name=\"age\" /></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>학년</td>\r\n");
      out.write("			<td>\r\n");
      out.write("				<select name=\"gradeNum\" >\r\n");
      out.write("					<option value=\"1학년\">1학년</option>\r\n");
      out.write("					<option value=\"2학년\">2학년</option>\r\n");
      out.write("					<option value=\"3학년\">3학년</option>\r\n");
      out.write("				</select>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>학반</td>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"radio\" name=\"classNum\" value=\"1반\" />1반\r\n");
      out.write("				<input type=\"radio\" name=\"classNum\" value=\"2반\" />2반\r\n");
      out.write("				<input type=\"radio\" name=\"classNum\" value=\"3반\" />3반\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\" class=\"text-center\">\r\n");
      out.write("				<button type=\"submit\">전송하기</button>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
